digraph AST {
1 [shape=box, label="VarDecl name='a'\ncode: \nloadI 256 => r0\naddI SP, 80 => SP"];
2 [shape=box, label="VarDecl name='g'"];
6 [shape=box, label="Location name='g'\ntype: int"];
7 [shape=box, label="Location name='x'\nreg: r1\ncode: \nloadAI [BP+16] => r1\ntype: int"];
5 [shape=box, label="Assignment\ncode: \nloadAI [BP+16] => r1\nloadI 336 => r2\nstoreAI r1 => [r2+0]"];
5 -> 6;
5 -> 7;
9 [shape=box, label="Location name='x'\nreg: r3\ncode: \nloadAI [BP+16] => r3\ntype: int"];
8 [shape=box, label="Return\ncode: \nloadAI [BP+16] => r3\ni2i r3 => RET\njump l0"];
8 -> 9;
4 [shape=box, label="Block\ncode: \nloadAI [BP+16] => r1\nloadI 336 => r2\nstoreAI r1 => [r2+0]\nloadAI [BP+16] => r3\ni2i r3 => RET\njump l0\nsymbolTable: (empty)"];
4 -> 5;
4 -> 8;
3 [shape=box, label="FuncDecl name='set'\ncode: \nset:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadAI [BP+16] => r1\nloadI 336 => r2\nstoreAI r1 => [r2+0]\nloadAI [BP+16] => r3\ni2i r3 => RET\njump l0\nl0:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: \n  x : int {stack offset=16}"];
3 -> 4;
14 [shape=box, label="Location name='x'\nreg: r4\ncode: \nloadAI [BP+16] => r4\ntype: int"];
15 [shape=box, label="Location name='y'\nreg: r5\ncode: \nloadAI [BP+24] => r5\ntype: int"];
13 [shape=box, label="BinaryOp op='+'\nreg: r6\ncode: \nloadAI [BP+16] => r4\nloadAI [BP+24] => r5\nadd r4, r5 => r6\ntype: int"];
13 -> 14;
13 -> 15;
12 [shape=box, label="Return\ncode: \nloadAI [BP+16] => r4\nloadAI [BP+24] => r5\nadd r4, r5 => r6\ni2i r6 => RET\njump l1"];
12 -> 13;
11 [shape=box, label="Block\ncode: \nloadAI [BP+16] => r4\nloadAI [BP+24] => r5\nadd r4, r5 => r6\ni2i r6 => RET\njump l1\nsymbolTable: (empty)"];
11 -> 12;
10 [shape=box, label="FuncDecl name='foo'\ncode: \nfoo:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadAI [BP+16] => r4\nloadAI [BP+24] => r5\nadd r4, r5 => r6\ni2i r6 => RET\njump l1\nl1:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: \n  x : int {stack offset=16}\n  y : int {stack offset=24}"];
10 -> 11;
21 [shape=box, label="Literal value=3\nreg: r7\ncode: \nloadI 3 => r7\ntype: int"];
20 [shape=box, label="FuncCall name='set'\nreg: r8\ncode: \nloadI 3 => r7\npush r7\ncall set\naddI SP, 8 => SP\ni2i RET => r8\ntype: int"];
20 -> 21;
22 [shape=box, label="Literal value=3\nreg: r9\ncode: \nloadI 3 => r9\ntype: int"];
19 [shape=box, label="BinaryOp op='=='\nreg: r10\ncode: \nloadI 3 => r7\npush r7\ncall set\naddI SP, 8 => SP\ni2i RET => r8\nloadI 3 => r9\ncmp_EQ r8, r9 => r10\ntype: bool"];
19 -> 20;
19 -> 22;
25 [shape=box, label="Location name='g'\ntype: int"];
26 [shape=box, label="Literal value=99\nreg: r11\ncode: \nloadI 99 => r11\ntype: int"];
24 [shape=box, label="Assignment\ncode: \nloadI 99 => r11\nloadI 336 => r12\nstoreAI r11 => [r12+0]"];
24 -> 25;
24 -> 26;
30 [shape=box, label="Literal value=98\nreg: r13\ncode: \nloadI 98 => r13\ntype: int"];
29 [shape=box, label="FuncCall name='set'\nreg: r14\ncode: \nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\ntype: int"];
29 -> 30;
31 [shape=box, label="Literal value=4\nreg: r15\ncode: \nloadI 4 => r15\ntype: int"];
28 [shape=box, label="BinaryOp op='=='\nreg: r16\ncode: \nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ntype: bool"];
28 -> 29;
28 -> 31;
34 [shape=box, label="Literal value=1\nreg: r17\ncode: \nloadI 1 => r17\ntype: int"];
33 [shape=box, label="Return\ncode: \nloadI 1 => r17\ni2i r17 => RET\njump l2"];
33 -> 34;
32 [shape=box, label="Block\ncode: \nloadI 1 => r17\ni2i r17 => RET\njump l2\nsymbolTable: (empty)"];
32 -> 33;
40 [shape=box, label="Literal value=4\nreg: r18\ncode: \nloadI 4 => r18\ntype: int"];
39 [shape=box, label="FuncCall name='set'\nreg: r19\ncode: \nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\ntype: int"];
39 -> 40;
42 [shape=box, label="Literal value=4\nreg: r20\ncode: \nloadI 4 => r20\ntype: int"];
41 [shape=box, label="FuncCall name='set'\nreg: r21\ncode: \nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\ntype: int"];
41 -> 42;
38 [shape=box, label="FuncCall name='foo'\nreg: r22\ncode: \nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\ntype: int"];
38 -> 39;
38 -> 41;
43 [shape=box, label="Literal value=8\nreg: r23\ncode: \nloadI 8 => r23\ntype: int"];
37 [shape=box, label="BinaryOp op='=='\nreg: r24\ncode: \nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ntype: bool"];
37 -> 38;
37 -> 43;
46 [shape=box, label="Literal value=10000\nreg: r25\ncode: \nloadI 10000 => r25\ntype: int"];
45 [shape=box, label="Return\ncode: \nloadI 10000 => r25\ni2i r25 => RET\njump l2"];
45 -> 46;
44 [shape=box, label="Block\ncode: \nloadI 10000 => r25\ni2i r25 => RET\njump l2\nsymbolTable: (empty)"];
44 -> 45;
36 [shape=box, label="Conditional\ncode: \nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:"];
36 -> 37;
36 -> 44;
35 [shape=box, label="Block\ncode: \nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nsymbolTable: (empty)"];
35 -> 36;
27 [shape=box, label="Conditional\ncode: \nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ncbr r16 => l5, l6\nl5:\nloadI 1 => r17\ni2i r17 => RET\njump l2\njump l9\nl6:\nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nl9:"];
27 -> 28;
27 -> 32;
27 -> 35;
23 [shape=box, label="Block\ncode: \nloadI 99 => r11\nloadI 336 => r12\nstoreAI r11 => [r12+0]\nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ncbr r16 => l5, l6\nl5:\nloadI 1 => r17\ni2i r17 => RET\njump l2\njump l9\nl6:\nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nl9:\nsymbolTable: (empty)"];
23 -> 24;
23 -> 27;
18 [shape=box, label="Conditional\ncode: \nloadI 3 => r7\npush r7\ncall set\naddI SP, 8 => SP\ni2i RET => r8\nloadI 3 => r9\ncmp_EQ r8, r9 => r10\ncbr r10 => l3, l4\nl3:\nloadI 99 => r11\nloadI 336 => r12\nstoreAI r11 => [r12+0]\nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ncbr r16 => l5, l6\nl5:\nloadI 1 => r17\ni2i r17 => RET\njump l2\njump l9\nl6:\nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nl9:\nl4:"];
18 -> 19;
18 -> 23;
17 [shape=box, label="Block\ncode: \nloadI 3 => r7\npush r7\ncall set\naddI SP, 8 => SP\ni2i RET => r8\nloadI 3 => r9\ncmp_EQ r8, r9 => r10\ncbr r10 => l3, l4\nl3:\nloadI 99 => r11\nloadI 336 => r12\nstoreAI r11 => [r12+0]\nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ncbr r16 => l5, l6\nl5:\nloadI 1 => r17\ni2i r17 => RET\njump l2\njump l9\nl6:\nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nl9:\nl4:\nsymbolTable: (empty)"];
17 -> 18;
16 [shape=box, label="FuncDecl name='main'\ncode: \nmain:\npush BP\ni2i SP => BP\naddI SP, 0 => SP\nloadI 3 => r7\npush r7\ncall set\naddI SP, 8 => SP\ni2i RET => r8\nloadI 3 => r9\ncmp_EQ r8, r9 => r10\ncbr r10 => l3, l4\nl3:\nloadI 99 => r11\nloadI 336 => r12\nstoreAI r11 => [r12+0]\nloadI 98 => r13\npush r13\ncall set\naddI SP, 8 => SP\ni2i RET => r14\nloadI 4 => r15\ncmp_EQ r14, r15 => r16\ncbr r16 => l5, l6\nl5:\nloadI 1 => r17\ni2i r17 => RET\njump l2\njump l9\nl6:\nloadI 4 => r18\npush r18\ncall set\naddI SP, 8 => SP\ni2i RET => r19\npush r19\nloadI 4 => r20\npush r20\ncall set\naddI SP, 8 => SP\ni2i RET => r21\npush r21\ncall foo\naddI SP, 16 => SP\ni2i RET => r22\nloadI 8 => r23\ncmp_EQ r22, r23 => r24\ncbr r24 => l7, l8\nl7:\nloadI 10000 => r25\ni2i r25 => RET\njump l2\nl8:\nl9:\nl4:\nl2:\ni2i BP => SP\npop BP\nreturn\nlocalSize: 0\nsymbolTable: (empty)"];
16 -> 17;
0 [shape=box, label="Program\ncode: (...)\nstaticSize: 88\nsymbolTable: \n  print_int : (int) -> void\n  print_bool : (bool) -> void\n  print_str : (str) -> void\n  set : (int) -> int\n  foo : (int, int) -> int\n  main : () -> int\n  a : int [10] {static offset=256}\n  g : int {static offset=336}"];
0 -> 1;
0 -> 2;
0 -> 3;
0 -> 10;
0 -> 16;
}
