// extensive_example_with_strings.decaf

// Global variables
int globalVar1;
int globalVar2;

def int add(int x, int y) {
    return x 
           + y;
}

def int subtract(int x, int y) {
    return x 
           - y;
}

def void printResult(int result) {
    if (isEven(result)) {
        print_str("Even Result");
    } else {
        print_str("Odd Result");
    }
}

def int factorial(int n) {
    if (n <= 1) {
        return 1;
    } else {
        return n 
               * factorial(n - 1);
    }
}

def int fibonacci(int n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) 
               + fibonacci(n - 2);
    }
}

def bool isEven(int num) {
    return num 
           % 2 == 0;
}

def bool isGreater(int a, int b) {
    return a > b;
}

def void complexNestedExample(int x) {
    int i;
    i = 0;
    if (x > 10) {
        while (i < 3) {
            print_str("Inner Loop Iteration: ");
            if (i == 2) {
                printResult(x);
                return; // Exit function if x > 10 and i == 2
            }
            i = i + 1; // Increment i in loop
        }
    } else {
        print_str("x is 10 or less.");
    }
}

int myArray[10];

def int main() {
    int a;
    int b;
    int c;
    int i;
    int
    fact;
    int fib;
    int
    innerVar;
    int x;
    
    i = 0;
    a = 5;
    b = 10;
    
    c = add(a, b); // Test addition
    printResult(c);

    fact = factorial(5); // Test factorial
    printResult(fact);
    
    fib = 
    fibonacci(7); // Test Fibonacci
    printResult(fib);

    while (i < 10) {
        printResult(myArray[i]); // Print each element
        i = i + 1; // Increment i
    }

    globalVar1 = 100; // Global variable usage
    globalVar2 = 200;

    c = add(globalVar1, globalVar2); // Test global variable addition
    printResult(c);

    // Nested calls
    c = subtract
    (add(20, 
                     30), 
                 factorial(3));
    printResult(c);

    // Conditional statements
    if (c > 0) {
        c = c * 2;
    } else {
        c = c - 1;
    }
    printResult(c);

    // Loops with break and continue
    i = 0;
    while (i < 10) {
        if (i == 5) {
            continue; // Skip 5
        }
        if (i == 8) {
            break; // Exit loop at 8
        }
        printResult(i);
        i = i + 1; // Increment i
    }

    // Complex nested structures
    if (isEven(c)) {
        innerVar = add(c, 10);









        complexNestedExample(innerVar);
    } else {
        innerVar = subtract(c, 
        
        
        
        
        
        
        
        10);
        complexNestedExample(innerVar);
    }

    // Using all operators and keywords
    x = 1;
    while (x < 5) {
        x = x + 1; // Increment x
        if (isGreater
        
        
        
        
        
        
        (x, 3)) {
            printResult(x);
            break; // Break if greater than 3
        } else {
            printResult(x);
        }
    }

    return
    0
    ;
    // End of main
}
